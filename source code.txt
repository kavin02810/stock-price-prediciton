import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import numpy as np
import matplotlib.pyplot as plt

# 1. Load and Preprocess Data
def load_and_preprocess_data(csv_file):
    """Loads stock data from a CSV file and preprocesses it for LSTM."""
    df = pd.read_csv(csv_file, index_col='Date', parse_dates=True)
    df = df[['Close']]  # Focus on the closing price
    df = df.dropna()
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(df)
    return scaled_data, scaler, df

def create_sequences(scaled_data, n_steps):
    """Creates sequences of data for the LSTM model."""
    X, y = [], []
    for i in range(len(scaled_data) - n_steps):
        X.append(scaled_data[i:(i + n_steps), 0])
        y.append(scaled_data[i + n_steps, 0])
    return np.array(X), np.array(y)

# 2. Build the LSTM Model
def build_lstm_model(n_steps):
    """Builds the LSTM model."""
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=(n_steps, 1)))
    model.add(LSTM(units=50))
    model.add(Dense(units=1))
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# 3. Train the Model and Make Predictions
def train_and_predict(model, X_train, y_train, X_test, scaler, original_df, n_steps):
    """Trains the LSTM model and makes predictions."""
    model.fit(X_train, y_train, epochs=50, batch_size=32, verbose=0)
    predicted_scaled = model.predict(X_test)
    predicted_prices = scaler.inverse_transform(predicted_scaled)
    actual_prices = original_df['Close'][len(original_df) - len(y_test):].values.reshape(-1, 1)
    return actual_prices, predicted_prices

# 4. Evaluate and Visualize Results
def evaluate_and_visualize(actual_prices, predicted_prices):
    """Evaluates the model and visualizes the results."""
    from sklearn.metrics import mean_squared_error
    rmse = np.sqrt(mean_squared_error(actual_prices, predicted_prices))
    print(f'Root Mean Squared Error (RMSE): {rmse:.2f}')

    plt.figure(figsize=(12, 6))
    plt.plot(actual_prices, label='Actual Price')
    plt.plot(predicted_prices, label='Predicted Price')
    plt.title('Stock Price Prediction using LSTM')
    plt.xlabel('Time')
    plt.ylabel('Stock Price')
    plt.legend()
    plt.show()

# --- Main Execution ---
if _name_ == "_main_":
    # Specify the CSV file path
    csv_file_path = 'your_stock_data.csv'  # Replace with your CSV file

    # Define the number of time steps to look back
    n_steps = 60

    # Load and preprocess the data
    scaled_data, scaler, original_df = load_and_preprocess_data(csv_file_path)

    # Create sequences for training and testing
    X, y = create_sequences(scaled_data, n_steps)
    X = np.reshape(X, (X.shape[0], X.shape[1], 1))  # Reshape for LSTM input

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=False)

    # Build the LSTM model
    model = build_lstm_model(n_steps)

    # Train the model and make predictions
    actual_prices, predicted_prices = train_and_predict(model, X_train, y_train, X_test, scaler, original_df, n_steps)

    # Evaluate and visualize the results
    evaluate_and_visualize(actual_prices, predicted_prices)